apply plugin: 'com.android.library'

import com.android.build.gradle.LibraryPlugin
import org.aspectj.bridge.IMessage
import org.aspectj.bridge.MessageHandler
import org.aspectj.tools.ajc.Main
android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion  rootProject.ext.buildToolsVersion


    defaultConfig {
        minSdkVersion  rootProject.ext.minSdkVersion
        targetSdkVersion  rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"


    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    lintOptions {
        abortOnError false
    }

}



dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile "org.aspectj:aspectjrt:$aspectjtools_version"
    provided "com.android.support:appcompat-v7:$android_support_version"
}


//搞成txt
task AppOutPutOrder {
    doLast {
        def capturesDirPath = project.getProjectDir().getParentFile().getPath() + File.separator + "captures"
        def capturesDir = new File(capturesDirPath)
        capturesDir.traverse {
            if (it.isFile() && it.name.endsWith(".trace")) {
                def orderName = it.name.replace(".trace", ".txt")
                def orderFile = new File(capturesDirPath, orderName)
                orderFile.write("")
                def dmtracedumpDir = getDmtraceDumpDir();
                println dmtracedumpDir
                def baseCommand = dmtracedumpDir + 'dmtracedump  -ho ' + it.absolutePath + " >> " + orderFile.absolutePath
                println baseCommand

                String osNameMatch = System.getProperty("os.name").toLowerCase();
                if (osNameMatch.contains("windows")) {
                    ("cmd /c start  /b " + baseCommand).execute()
                } else {
                    ["bash", "-c", baseCommand].execute()
                }

            }
        }
    }
}

//过滤
task AppFilterMethodOrder {
    doLast {

        def capturesDirPath = project.getProjectDir().getParentFile().path + File.separator + "captures";
        def capturesDir = new File(capturesDirPath);

        capturesDir.traverse {
            if (it.isFile() && it.name.endsWith(".txt") && !it.name.contains("--filter")) {
                def orderName = it.name.replace(".txt", "--order.txt")
                def orderFilterName = it.name.replace(".txt", "--filter.txt")
                def orderFile = new File(capturesDirPath, orderName)
                def filterFile = new File(capturesDirPath, orderFilterName)

                List<TraceBean> arrays = new ArrayList<>()
                List<List<TraceBean>> arraysSort = new ArrayList<>()

                orderFile.write('')
                it.eachLine { line ->
                    if (line.matches('.*\\.onMeasure\\s.*|.*\\.onLayout\\s.*|.*\\.onDraw\\s.*')) {
                        line = line.replaceAll("\\s+", " ")

                        filterFile.append(line+'\n')

                        String[] result = line.split(" ")
                        TraceBean traceBean = new TraceBean(result[1], result[2], result[3], result[4], result[5])
                        arrays.add(traceBean)
                    }
                }

                int allTraceSize = arrays.size()
                for (int i = 0; i < allTraceSize; i ++) {

                    int arraysSortSize=arraysSort.size()
                    int arraysSortAllSize=0
                    for(int j=0;j<arraysSortSize;j++){
                        arraysSortAllSize+=arraysSort.get(j).size()
                    }


                    if (!arrays.get(i).type.equals(arrays.get(i + 1).type)) {
                        int size=i-arraysSortAllSize*2+1;

                        List<TraceBean> datas = new ArrayList<>(size)
                        for(int j=0;j<size;j++){
                            TraceBean data = arrays.get(j+i-size+1)
                            data.time = String.valueOf(Double.valueOf(arrays.get(i+size-j).time) - Double.valueOf(data.time))
                            datas.add(data)
                        }


                        arraysSort.add(datas)
                        i+=size
                    }


                }

                orderFile.write(arraysSort.toString())


            }
        }
    }
}

/**
 * read the sdk dir from local.properties
 * eg :
 *  sdk.dir = /home/env/sdk
 *  so:
 *   dmtracedump.dir = /home/env/sdk/platform-tools
 *
 * @return the dir which dmtracedump tools exists
 */
def getDmtraceDumpDir() {
    def rootDir = project.rootDir
    def localProperties = new File(rootDir, "local.properties")
    def sdkDir = null;
    if (localProperties.exists()) {
        Properties properties = new Properties()
        localProperties.withInputStream { instr ->
            properties.load(instr)
        }
        sdkDir = properties.getProperty('sdk.dir')
    }
    if (sdkDir == null || !(new File(sdkDir).exists())) {
        sdkDir = android.getSdkDirectory().getAbsolutePath()
    }
    if (sdkDir == null || !(new File(sdkDir).exists())) {
        sdkDir = android.plugin.getSdkFolder().getAbsolutePath()
    }
    def dmtraceDumpToolDir = sdkDir + File.separator + "platform-tools" + File.separator
    if (new File(dmtraceDumpToolDir).exists()) {
        return dmtraceDumpToolDir;
    }
    return ""
}

//使用 AspectJ 的编译器对所有AspectJ注解的地方进行织入
android.libraryVariants.all { variant ->
    LibraryPlugin plugin = project.plugins.getPlugin(LibraryPlugin)
    JavaCompile javaCompile = variant.javaCompile
    javaCompile.doLast {
        String[] args = ["-showWeaveInfo",
                         "-1.5",
                         "-inpath", javaCompile.destinationDir.toString(),
                         "-aspectpath", javaCompile.classpath.asPath,
                         "-d", javaCompile.destinationDir.toString(),
                         "-classpath", javaCompile.classpath.asPath]
//                         "-bootclasspath", plugin.project.android.bootClasspath.join(
//                File.pathSeparator)]

        MessageHandler handler = new MessageHandler(true);
        new Main().run(args, handler)

        def log = project.logger
        for (IMessage message : handler.getMessages(null, true)) {
            switch (message.getKind()) {
                case IMessage.ABORT:
                case IMessage.ERROR:
                case IMessage.FAIL:
                    log.error message.message, message.thrown
                    break;
                case IMessage.WARNING:
                case IMessage.INFO:
                    log.info message.message, message.thrown
                    break;
                case IMessage.DEBUG:
                    log.debug message.message, message.thrown
                    break;
            }
        }
    }
}


class TraceBean {
    public String type
    public String time
    public String name
    public String root
    public String simpleName

    TraceBean(String type, String time, String name, String root, String simpleName) {
        this.type = type
        this.time = time
        this.name = name
        this.root = root
        this.simpleName = simpleName
    }

    @Override
    String toString() {

        return "{\n" +
                "\"time\":\"" + time + "\",\n" +
                "\"name\":\"" + name + "\",\n" +
                "\"root\":\"" + root + "\",\n" +
                "\"simpleName\":\"" + simpleName + "\"\n" +

                "}\n"
    }
}